task: MRSS-Velocity-Go1-v0  # Name of the task.

headless: true  # Run simulation without rendering a GUI (faster, better for training on servers)
max_iterations: 1000  # Adjust this to train for longer: 1.5k should give you a working policy for rough terrain

seed: 42 # Performance should be somewhat consistent across seeds

run_name: sim2real_tuto  # Run name suffix to the log directory.
resume: false  # Whether to resume from a checkpoint.
logger: wandb  # Logger module to use. {neptune, wandb, tensorboard}
log_project_name: MRSS25  # Name of the logging project when using wandb or neptune.

env:
  scene:
    num_envs: 4096  # Number of environments to generate terrain for and run in parallel.

    terrain:

      terrain_generator: 
        # The difficulty linearly increases along the rows if curriculum is enabled.
        curriculum: True  # Enable terrain difficulty progression over time
        
        # You can change the proportions of the different terrains
        # See the different possible terrains here https://isaac-sim.github.io/IsaacLab/main/source/api/lab/isaaclab.terrains.html#terrain-generator
        sub_terrains:
          flat: 
            proportion: 1.0

          pyramid_stairs:
            proportion: 0.0

          pyramid_stairs_inv:
            proportion: 0.0

          boxes:
            proportion: 0.0

          random_rough: 
            proportion: 0.0

          pyramid_slope: 
            proportion: 0.0

          pyramid_slope_inv: 
            proportion: 0.0


  events:
    add_base_mass:
      params:
        mass_distribution_params: [ -1.0, 3.0 ]  # Range for randomizing the base mass

    push_robot:  'null' # Event to push the robot, set to 'null'  to disable

  rewards:
    action_rate_l2:
      weight: -0.1  # Penalty for rapid changes in actions (encourages smoothness)
    ang_vel_xy_l2:
      weight: -0.05  # Penalty for angular velocity in x and y directions (helps stability)
    dof_acc_l2:
      weight: -2.5e-07  # Penalty for joint accelerations (encourages smoother motion)
    dof_pos_limits:
      weight: 0.0  # Penalty for exceeding joint limits (disabled here)
    dof_torques_l2:
      weight: -0.0002  # Penalty for large joint torques (encourages energy efficiency)
    feet_air_time:
      weight: 0.01  # Reward for time feet spend in the air (encourages stepping/gait)
    flat_orientation_l2:
      weight: 0.0  # Penalty for orientation deviation from flat (disabled here)
    lin_vel_z_l2:
      weight: -2.0  # Penalty for vertical (z-axis) linear velocity (encourages flat motion)
    track_ang_vel_z_exp:
      weight: 0.75  # Reward for matching desired angular velocity around z-axis (yaw control)
    track_lin_vel_xy_exp:
      weight: 1.5  # Reward for matching desired linear velocity in x-y plane

algorithm:
  class_name: 'PPO'  # Name of the RL algorithm to use (Proximal Policy Optimization)
  clip_param: 0.2  # Clipping parameter for PPO objective
  desired_kl: 0.01  # Target KL divergence between old and new policies
  entropy_coef: 0.01  # Coefficient for entropy bonus (encourages exploration)
  gamma: 0.99  # Discount factor for future rewards
  lam: 0.95  # GAE lambda parameter for bias-variance tradeoff
  learning_rate: 0.001  # Initial learning rate for optimizer
  max_grad_norm: 1.0  # Maximum gradient norm for clipping
  normalize_advantage_per_mini_batch: False  # Whether to normalize advantages per mini-batch
  num_learning_epochs: 5  # Number of passes over data per training iteration
  num_mini_batches: 4  # Number of mini-batches per epoch
  rnd_cfg: null  # Configuration for Random Network Distillation (not used here)
  schedule: 'adaptive'  # Learning rate schedule type (adaptive vs fixed)
  symmetry_cfg: null  # Optional symmetry loss configuration (not used here)
  use_clipped_value_loss: True  # Use value function clipping in PPO
  value_loss_coef: 1.0  # Coefficient for value function loss
